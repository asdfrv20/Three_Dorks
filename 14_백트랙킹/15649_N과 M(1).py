# 백트랙킹
# 백준 - 15649번

'''
<백트래킹(backtracking)이란?>
※ 참고 - https://chanhuiseok.github.io/posts/algo-23/
○ 정의: 해를 찾는 도중 해가 아니어서 막히면, 되돌아가서 다시 해를 찾아가는 기법
○ 적용 문제: 최적화 문제, 결정 문제 
○ DFS vs 백트래킹
  - DFS(깊이 우선 탐색): 가능한 모든 경로(후보)를 탐색한다.
    >> 불피요할 것 같은 경로를 사전에 차단하거나 하는 행동이 없음!(경우의 수 줄이지 못함, N! 경우의 수 문제 해결 X)
  - backtracking(백트래킹): 해를 찾아가는 도중, 지금의 경로가 해가 될 것 같지 않으면 그 경로를 더이상 가지 않고 되돌아 가는 방법
    == "가지 치기"(불필요한 부분을 고쳐내고 최대한 올바른 쪽으로 간다는 의미)
    >> 반복문의 횟수 줄이기 효율적! 핵심은 가지치기를 얼마나 잘할 것인가...?
○ 백트래킹 특징
  * 특정 조건을 만족하는 경우만 살펴본다
  * 정리: "답이 될만한지 판단하고 그렇지 않으면 그 부분까지 탐색하는 것을 하지 않고 가지치기 하는 것"이 백트래킹
  * 방법: DFS 등으로 모든 경우의 수 탐색 >> 그 과정 중 절대 안될거 같은 상황을 if문으로 정의(이 경우 탐색 중지) >> 이전으로 돌아가 다른 경우 탐색
○ 백트래킹 유망성 판단
  * 해가 될 가능성이 있다 = "유망하다(promising)"
  * 유망하지 않은 노드에 가지 않는다 = "가지치기(pruning) 한다"
'''


N, M = map(int, input().split())

N_list = list(range(1,N+1))   # 1~N까지의 자연수를 나타냄
N_index = list(range(M))       # 출력되는 각 자리가 가리키는 N_list의 인덱스 번호


while True:
  


  # 뽑아낸 숫자들을 한 줄 출력
  for i in M_list:
    print(N_list[i], end=' ')
  print()